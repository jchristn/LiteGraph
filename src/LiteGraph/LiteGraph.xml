<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LiteGraph</name>
    </assembly>
    <members>
        <member name="T:LiteGraph.Constants">
            <summary>
            Constants.
            </summary>
        </member>
        <member name="F:LiteGraph.Constants.LogDirectory">
            <summary>
            Log file directory.
            </summary>
        </member>
        <member name="F:LiteGraph.Constants.LogFilename">
            <summary>
            Log filename.
            </summary>
        </member>
        <member name="T:LiteGraph.Credential">
            <summary>
            Credentials.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.UserGUID">
            <summary>
            User GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.BearerToken">
            <summary>
            Access key.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.Credential.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.Edge">
            <summary>
            Edge in the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.GraphGUID">
            <summary>
            Globally-unique identifier for the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.From">
            <summary>
            Globally-unique identifier of the from node.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.FromNode">
            <summary>
            From node.  This property is only populated when retrieving routes.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.To">
            <summary>
            Globally-unique identifier of the to node.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.ToNode">
            <summary>
            To node.  This property is only populated when retrieving routes.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Cost">
            <summary>
            Cost.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Labels">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Tags">
            <summary>
            Tags.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Vectors">
            <summary>
            Vectors.
            </summary>
        </member>
        <member name="M:LiteGraph.Edge.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.EdgeBetween">
            <summary>
            Existence check for multiple identifiers request.
            </summary>
        </member>
        <member name="P:LiteGraph.EdgeBetween.From">
            <summary>
            From GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.EdgeBetween.To">
            <summary>
            To GUID.
            </summary>
        </member>
        <member name="M:LiteGraph.EdgeBetween.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.EnumerationOrderEnum">
            <summary>
            Enumeration order.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CreatedAscending">
            <summary>
            Created ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CreatedDescending">
            <summary>
            Created descending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.NameAscending">
            <summary>
            Name ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.NameDescending">
            <summary>
            Name descending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.GuidAscending">
            <summary>
            GUID ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.GuidDescending">
            <summary>
            GUID descending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CostAscending">
            <summary>
            Cost ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CostDescending">
            <summary>
            Cost descending.
            </summary>
        </member>
        <member name="T:LiteGraph.ExistenceRequest">
            <summary>
            Existence check for multiple identifiers request.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceRequest.Nodes">
            <summary>
            List of node GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceRequest.Edges">
            <summary>
            List of edge GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceRequest.EdgesBetween">
            <summary>
            List of edges between two nodes.
            </summary>
        </member>
        <member name="M:LiteGraph.ExistenceRequest.#ctor">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="M:LiteGraph.ExistenceRequest.ContainsExistenceRequest">
            <summary>
            Verify that the object contains at least one existence request.
            </summary>
            <returns>True if present.</returns>
        </member>
        <member name="T:LiteGraph.ExistenceResult">
            <summary>
            Existence check for multiple identifiers result.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.ExistingNodes">
            <summary>
            List of existing node GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.MissingNodes">
            <summary>
            List of missing node GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.ExistingEdges">
            <summary>
            List of existing edge GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.MissingEdges">
            <summary>
            List of missing edge GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.ExistingEdgesBetween">
            <summary>
            List of existing edges between two nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.MissingEdgesBetween">
            <summary>
            List of missing edges between two nodes.
            </summary>
        </member>
        <member name="M:LiteGraph.ExistenceResult.#ctor">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfAttribute">
            <summary>
            Attribute.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttribute.Id">
            <summary>
            Attribute ID.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttribute.Title">
            <summary>
            Attribute title.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttribute.Type">
            <summary>
            Attribute type.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttribute.Default">
            <summary>
            Attribute default value.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="id">Attribute ID.</param>
            <param name="title">Attribute title.</param>
            <param name="type">Attribute type.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttribute.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfAttributes">
            <summary>
            Attributes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttributes.AttributeList">
            <summary>
            Attributes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttributes.Class">
            <summary>
            Attribute class, i.e. 'node' or 'edge'.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttributes.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfAttributeValue">
            <summary>
            Attribute value.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttributeValue.For">
            <summary>
            ID of the object to which the attribute is assigned.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttributeValue.Value">
            <summary>
            Value of the attribute.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttributeValue.#ctor(System.String,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="forGuid">ID of the object to which the attribute is assigned.</param>
            <param name="value">Value of the attribute.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttributeValue.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfAttributeValues">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttributeValues.Values">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttributeValues.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfDocument">
            <summary>
            Graph Exchange XML Format document.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfDocument.Meta">
            <summary>
            Document metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfDocument.Graph">
            <summary>
            Graph.  
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfDocument.Xmlns">
            <summary>
            XML namespace.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfDocument.SchemaLocation">
            <summary>
            Schema location.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfDocument.Version">
            <summary>
            Version.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfDocument.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfEdge">
            <summary>
            Edge.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.ValueList">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.Id">
            <summary>
            ID.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.Source">
            <summary>
            Source.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.Target">
            <summary>
            Target.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfEdge.#ctor(System.Guid,System.Guid,System.Guid)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="id">ID.</param>
            <param name="source">Source.</param>
            <param name="target">Target.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfEdge.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfEdges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdges.Edges">
            <summary>
            List of edges.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfEdges.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfGraph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfGraph.Attributes">
            <summary>
            Attributes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfGraph.NodeList">
            <summary>
            Nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfGraph.EdgeList">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfGraph.DefaultEdgeType">
            <summary>
            Default edge type, i.e. 'directed'.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfGraph.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfMetadata">
            <summary>
            Document metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfMetadata.Creator">
            <summary>
            Document creator.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfMetadata.Description">
            <summary>
            Document description.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfMetadata.LastModifiedDate">
            <summary>
            Last modified date.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfMetadata.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfNode">
            <summary>
            Node.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNode.ValueList">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNode.Id">
            <summary>
            ID.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNode.Label">
            <summary>
            Label.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfNode.#ctor(System.Guid,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="id">ID.</param>
            <param name="label">Label.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfNode.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfNodes">
            <summary>
            Nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNodes.Nodes">
            <summary>
            List of nodes.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfNodes.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfWriter">
            <summary>
            GEXF file writer.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfWriter.#ctor(LiteGraph.Serialization.SerializationHelper)">
            <summary>
            Instantiate.
            </summary>
            <param name="serializer">Serializer.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfWriter.ExportToFile(LiteGraph.LiteGraphClient,System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Write a GEXF file.
            </summary>
            <param name="client">LiteGraphClient.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="filename">Output filename.</param>
            <param name="includeData">True to include node and edge data.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfWriter.RenderAsGexf(LiteGraph.LiteGraphClient,System.Guid,System.Guid,System.Boolean)">
            <summary>
            Render a graph as a GEXF string.
            </summary>
            <param name="client">LiteGraphClient.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="includeData">True to include node and edge data.</param>
            <returns>GEXF document.</returns>
        </member>
        <member name="T:LiteGraph.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Labels">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Tags">
            <summary>
            Tags.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Vectors">
            <summary>
            Vectors.
            </summary>
        </member>
        <member name="M:LiteGraph.Graph.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.GraphRepositories.GraphRepositoryBase">
            <summary>
            Graph repository base class.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Logging">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Serializer">
            <summary>
            Serialization helper.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.InitializeRepository">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateTenant(LiteGraph.TenantMetadata)">
            <summary>
            Create a tenant.
            </summary>
            <param name="tenant">Tenant.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateTenant(System.String)">
            <summary>
            Create a tenant.
            </summary>
            <param name="name">Name.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadTenants(LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read tenants.
            </summary>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Tenants.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadTenant(System.Guid)">
            <summary>
            Read a tenant by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.UpdateTenant(LiteGraph.TenantMetadata)">
            <summary>
            Update a tenant.
            </summary>
            <param name="tenant">Tenant.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteTenant(System.Guid,System.Boolean)">
            <summary>
            Delete a tenant.
            </summary>
            <param name="guid">GUID.</param>
            <param name="force">True to force deletion of users and credentials.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ExistsTenant(System.Guid)">
            <summary>
            Check if a tenant exists by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateUser(LiteGraph.UserMaster)">
            <summary>
            Create a user.
            </summary>
            <param name="user">User.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateUser(System.Guid,System.String,System.String,System.String,System.String)">
            <summary>
            Create a user.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="firstName">First name.</param>
            <param name="lastName">Last name.</param>
            <param name="email">Email.</param>
            <param name="password">Password.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadUsers(System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read users.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="email">Email.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Users.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadUser(System.Guid,System.Guid)">
            <summary>
            Read a user by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadUserByEmail(System.Guid,System.String)">
            <summary>
            Read a user by email.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="email">Email.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.UpdateUser(LiteGraph.UserMaster)">
            <summary>
            Update a user.
            </summary>
            <param name="user">User.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteUser(System.Guid,System.Guid)">
            <summary>
            Delete a user.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteUsers(System.Guid)">
            <summary>
            Delete users associated with a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ExistsUser(System.Guid,System.Guid)">
            <summary>
            Check if a user exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ExistsUserByEmail(System.Guid,System.String)">
            <summary>
            Check if a user exists by email.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="email">Email.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateCredential(LiteGraph.Credential)">
            <summary>
            Create a credential.
            </summary>
            <param name="credential">Credential.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateCredential(System.Guid,System.Guid,System.String)">
            <summary>
            Create a credential.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="userGuid">User GUID.</param>
            <param name="name">Name.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadCredentials(System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read credentials.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="userGuid">User GUID.</param>
            <param name="bearerToken">Bearer token.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Credentials.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadCredential(System.Guid,System.Guid)">
            <summary>
            Read a credential by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadCredentialByBearerToken(System.String)">
            <summary>
            Read a credential by bearer token.
            </summary>
            <param name="bearerToken">Bearer token.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.UpdateCredential(LiteGraph.Credential)">
            <summary>
            Update a credential.
            </summary>
            <param name="cred">Credential.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteCredential(System.Guid,System.Guid)">
            <summary>
            Delete a credential.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteUserCredentials(System.Guid,System.Guid)">
            <summary>
            Delete credentials associated with a user.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="userGuid">User GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ExistsCredential(System.Guid,System.Guid)">
            <summary>
            Check if a credential exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateLabel(LiteGraph.LabelMetadata)">
            <summary>
            Create a label.
            </summary>
            <param name="label">Label.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateLabel(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String)">
            <summary>
            Create a label.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="label">Label.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateMultipleLabels(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.LabelMetadata})">
            <summary>
            Create multiple labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadLabels(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="label">Label.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadLabel(System.Guid,System.Guid)">
            <summary>
            Read a label by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.UpdateLabel(LiteGraph.LabelMetadata)">
            <summary>
            Update a label.
            </summary>
            <param name="label">Label.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteLabel(System.Guid,System.Guid)">
            <summary>
            Delete a label.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteLabels(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ExistsLabel(System.Guid,System.Guid)">
            <summary>
            Check if a label exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateTag(LiteGraph.TagMetadata)">
            <summary>
            Create a tag.
            </summary>
            <param name="tag">Tag.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateTag(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String)">
            <summary>
            Create a tag.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateMultipleTags(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.TagMetadata})">
            <summary>
            Create multiple tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="tags">Tags.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadTags(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadTag(System.Guid,System.Guid)">
            <summary>
            Read a tag by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.UpdateTag(LiteGraph.TagMetadata)">
            <summary>
            Update a tag.
            </summary>
            <param name="tag">Tag.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteTag(System.Guid,System.Guid)">
            <summary>
            Delete a tag.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteTags(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ExistsTag(System.Guid,System.Guid)">
            <summary>
            Check if a tag exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateVector(LiteGraph.VectorMetadata)">
            <summary>
            Create a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateVector(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.Int32,System.String,System.Collections.Generic.List{System.Single})">
            <summary>
            Create a vector.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="model">Model.</param>
            <param name="dimensionality">Dimensionality.</param>
            <param name="content">Content.</param>
            <param name="embeddings">Embeddings.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateMultipleVectors(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <summary>
            Create multiple vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="vectors">Vectors.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadVectors(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadGraphVectors(System.Guid,System.Guid)">
            <summary>
            Read graph vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadNodeVectors(System.Guid,System.Guid,System.Guid)">
            <summary>
            Read node vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadEdgeVectors(System.Guid,System.Guid,System.Guid)">
            <summary>
            Read edge vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadVector(System.Guid,System.Guid)">
            <summary>
            Read a vector by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.UpdateVector(LiteGraph.VectorMetadata)">
            <summary>
            Update a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteVector(System.Guid,System.Guid)">
            <summary>
            Delete a vector.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteVectors(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ExistsVector(System.Guid,System.Guid)">
            <summary>
            Check if a vector exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.SearchGraphVectors(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <summary>
            Search graph vectors.
            </summary>
            <param name="searchType">Vector search type.</param>
            <param name="vectors">Vectors.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="filter">Filter.</param>
            <returns>Vector search results containing graphs.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.SearchNodeVectors(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <summary>
            Search node vectors.
            </summary>
            <param name="searchType">Vector search type.</param>
            <param name="vectors">Vectors.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="filter">Filter.</param>
            <returns>Vector search results containing nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.SearchEdgeVectors(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <summary>
            Search edge vectors.
            </summary>
            <param name="searchType">Vector search type.</param>
            <param name="vectors">Vectors.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="filter">Filter.</param>
            <returns>Vector search results containing edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateGraph(LiteGraph.Graph)">
            <summary>
            Create a graph.
            </summary>
            <param name="graph">Graph.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateGraph(System.Guid,System.Guid,System.String,System.Object,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <summary>
            Create a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="name">Unique name.</param>
            <param name="data">Data.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="vectors">Vectors.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadGraphs(System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read graphs.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags on which to match.</param>
            <param name="graphFilter">
            Graph filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Graphs.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadGraph(System.Guid,System.Guid)">
            <summary>
            Read a graph by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.UpdateGraph(LiteGraph.Graph)">
            <summary>
            Update a graph.
            </summary>
            <param name="graph">Graph.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteGraph(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Delete a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="force">True to force deletion of nodes and edges.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteGraphs(System.Guid)">
            <summary>
            Delete graphs associated with a tenant.  Deletion is forceful.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteAllGraphLabels(System.Guid,System.Guid)">
            <summary>
            Delete all labels associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteGraphLabels(System.Guid,System.Guid)">
            <summary>
            Delete labels for the graph object itself, leaving subordinate node and edge labels in place.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteAllGraphTags(System.Guid,System.Guid)">
            <summary>
            Delete all tags associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteGraphTags(System.Guid,System.Guid)">
            <summary>
            Delete tags for the graph object itself, leaving subordinate node and edge tags in place.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteAllGraphVectors(System.Guid,System.Guid)">
            <summary>
            Delete all vectors associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteGraphVectors(System.Guid,System.Guid)">
            <summary>
            Delete vectors for the graph object itself, leaving subordinate node and edge tags in place.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ExistsGraph(System.Guid,System.Guid)">
            <summary>
            Check if a graph exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateNode(LiteGraph.Node)">
            <summary>
            Create a node.
            </summary>
            <param name="node">Node.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateNode(System.Guid,System.Guid,System.Guid,System.String,System.Object,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <summary>
            Create a node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="guid">GUID.</param>
            <param name="name">Name.</param>
            <param name="data">Data.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="vectors">Vectors.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateMultipleNodes(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Node})">
            <summary>
            Create multiple nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodes">Nodes.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadNodes(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.  
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadNode(System.Guid,System.Guid,System.Guid)">
            <summary>
            Read node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.UpdateNode(LiteGraph.Node)">
            <summary>
            Update node.
            </summary>
            <param name="node"></param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteNode(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete a node and all associated edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteNodes(System.Guid,System.Guid)">
            <summary>
            Delete all nodes from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteNodes(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete multiple nodes from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteNodeLabels(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete node labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteNodeTags(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete node tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteNodeVectors(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete vectors for a node object.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ExistsNode(System.Guid,System.Guid,System.Guid)">
            <summary>
            Check existence of a node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateEdge(LiteGraph.Edge)">
            <summary>
            Create an edge between two nodes.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateEdge(System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.String,System.Int32,System.Object,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <summary>
            Create an edge between two nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="guid">GUID.</param>
            <param name="fromGuid">From GUID.</param>
            <param name="toGuid">To GUID.</param>
            <param name="name">Name.</param>
            <param name="cost">Cost.</param>
            <param name="labels">Labels.</param>
            <param name="data">Data.</param>
            <param name="tags">Tags.</param>
            <param name="vectors">Vectors.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.CreateMultipleEdges(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Edge})">
            <summary>
            Create multiple edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edges">Edges.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ReadEdge(System.Guid,System.Guid,System.Guid)">
            <summary>
            Read edge.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.UpdateEdge(LiteGraph.Edge)">
            <summary>
            Update edge.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteEdge(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete edge.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteEdges(System.Guid,System.Guid)">
            <summary>
            Delete all edges from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteNodeEdges(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete all edges associated with a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteNodeEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete all edges associated with a set of given nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete multiple edges from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteEdgeLabels(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete edge labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteEdgeTags(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete edge tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.DeleteEdgeVectors(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete vectors for an edge object.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.ExistsEdge(System.Guid,System.Guid,System.Guid)">
            <summary>
            Check if an edge exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.BatchExistence(System.Guid,System.Guid,LiteGraph.ExistenceRequest)">
            <summary>
            Batch existence request.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="req">Existence request.</param>
            <returns>Existence result.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.GetParents(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get nodes that have edges connecting to the specified node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.GetChildren(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get nodes to which the specified node has connecting edges connecting.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.GetNeighbors(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get neighbors for a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.GetRoutes(LiteGraph.SearchTypeEnum,System.Guid,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr)">
            <summary>
            Get routes between two nodes.
            </summary>
            <param name="searchType">Search type.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <returns>Route details.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.GetConnectedEdges(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges connected to or initiated from a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.GetEdgesFrom(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges from a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.GetEdgesTo(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges to a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.GetEdgesBetween(System.Guid,System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges between two neighboring nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="T:LiteGraph.GraphRepositories.SqliteGraphRepository">
            <summary>
            Sqlite graph repository.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.SqliteGraphRepository.Filename">
            <summary>
            Sqlite database filename.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.SqliteGraphRepository.MaxStatementLength">
            <summary>
            Maximum supported statement length.
            Default for Sqlite is 1000000 (see https://www.sqlite.org/limits.html).
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.SqliteGraphRepository.SelectBatchSize">
            <summary>
            Number of records to retrieve for object list retrieval.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.SqliteGraphRepository.TimestampFormat">
            <summary>
            Timestamp format.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.#ctor(System.String)">
            <summary>
            Instantiate.
            </summary>
            <param name="filename">Sqlite database filename.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.InitializeRepository">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateTenant(LiteGraph.TenantMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateTenant(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteTenant(System.Guid,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ExistsTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadTenants(LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.UpdateTenant(LiteGraph.TenantMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateUser(LiteGraph.UserMaster)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateUser(System.Guid,System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteUser(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteUsers(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ExistsUser(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ExistsUserByEmail(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadUser(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadUserByEmail(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadUsers(System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.UpdateUser(LiteGraph.UserMaster)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateCredential(LiteGraph.Credential)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateCredential(System.Guid,System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteCredential(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteUserCredentials(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ExistsCredential(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadCredential(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadCredentialByBearerToken(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadCredentials(System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.UpdateCredential(LiteGraph.Credential)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateLabel(LiteGraph.LabelMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateLabel(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateMultipleLabels(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.LabelMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteLabel(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteLabels(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ExistsLabel(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadLabel(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadLabels(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.UpdateLabel(LiteGraph.LabelMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateTag(LiteGraph.TagMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateTag(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateMultipleTags(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.TagMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteTag(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteTags(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ExistsTag(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadTag(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadTags(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.UpdateTag(LiteGraph.TagMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateVector(LiteGraph.VectorMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateVector(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.Int32,System.String,System.Collections.Generic.List{System.Single})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateMultipleVectors(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteVector(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteVectors(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ExistsVector(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadVector(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadVectors(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadGraphVectors(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadNodeVectors(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadEdgeVectors(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.UpdateVector(LiteGraph.VectorMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.SearchGraphVectors(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.SearchNodeVectors(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.SearchEdgeVectors(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateGraph(LiteGraph.Graph)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateGraph(System.Guid,System.Guid,System.String,System.Object,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadGraphs(System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.UpdateGraph(LiteGraph.Graph)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteGraph(System.Guid,System.Guid,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteGraphs(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteAllGraphLabels(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteGraphLabels(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteAllGraphTags(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteGraphTags(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteAllGraphVectors(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteGraphVectors(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ExistsGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateNode(LiteGraph.Node)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateNode(System.Guid,System.Guid,System.Guid,System.String,System.Object,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateMultipleNodes(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Node})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadNodes(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadNode(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.UpdateNode(LiteGraph.Node)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteNode(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteNodes(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteNodes(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteNodeEdges(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteNodeEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteNodeLabels(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteNodeTags(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteNodeVectors(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ExistsNode(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.GetParents(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.GetChildren(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.GetNeighbors(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.GetRoutes(LiteGraph.SearchTypeEnum,System.Guid,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.BatchExistence(System.Guid,System.Guid,LiteGraph.ExistenceRequest)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.GetConnectedEdges(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.GetEdgesFrom(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.GetEdgesTo(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.GetEdgesBetween(System.Guid,System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateEdge(LiteGraph.Edge)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateEdge(System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.String,System.Int32,System.Object,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.CreateMultipleEdges(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Edge})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ReadEdge(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.UpdateEdge(LiteGraph.Edge)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteEdge(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteEdges(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteEdgeLabels(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteEdgeTags(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.DeleteEdgeVectors(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.SqliteGraphRepository.ExistsEdge(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Helpers.NvcHelpers">
            <summary>
            Name-value collection helpers.
            </summary>
        </member>
        <member name="M:LiteGraph.Helpers.NvcHelpers.Combine(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Combine two name-value collections.
            </summary>
            <param name="nvc1">Name-value collection 1.</param>
            <param name="nvc2">Name-value collection 2.</param>
            <returns>Name-value collection.</returns>
        </member>
        <member name="T:LiteGraph.Helpers.StringHelpers">
            <summary>
            String collection helpers.
            </summary>
        </member>
        <member name="M:LiteGraph.Helpers.StringHelpers.Combine(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Combine two string lists.
            </summary>
            <param name="list1">String list 1.</param>
            <param name="list2">String list 2.</param>
            <returns>String list.</returns>
        </member>
        <member name="T:LiteGraph.Helpers.VectorHelper">
            <summary>
            Vector helper.
            </summary>
        </member>
        <member name="M:LiteGraph.Helpers.VectorHelper.CalculateCosineSimilarity(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
            Calculates the cosine similarity between two vectors
            </summary>
            <returns>Value between -1 and 1, where 1 means vectors are identical, 0 means orthogonal, -1 means opposite</returns>
        </member>
        <member name="M:LiteGraph.Helpers.VectorHelper.CalculateCosineDistance(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
            Calculates the cosine distance between two vectors
            </summary>
            <returns>Value between 0 and 2, where 0 means vectors are identical, 2 means opposite</returns>
        </member>
        <member name="M:LiteGraph.Helpers.VectorHelper.CalculateEuclidianSimilarity(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
            Calculates the Euclidean similarity between two vectors
            </summary>
            <returns>Value between 0 and 1, where 1 means vectors are identical</returns>
        </member>
        <member name="M:LiteGraph.Helpers.VectorHelper.CalculateEuclidianDistance(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
            Calculates the Euclidean distance between two vectors
            </summary>
            <returns>Value >= 0, where 0 means vectors are identical</returns>
        </member>
        <member name="M:LiteGraph.Helpers.VectorHelper.CalculateInnerProduct(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
            Calculates the inner (dot) product of two vectors
            </summary>
            <returns>The sum of the element-wise products</returns>
        </member>
        <member name="T:LiteGraph.LabelMetadata">
            <summary>
            Label metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.NodeGUID">
            <summary>
            Node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.EdgeGUID">
            <summary>
            Edge GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.Label">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.LabelMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.LabelMetadata.FromListString(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Collections.Generic.List{System.String})">
            <summary>
            Create a list of label metadata from a list of labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="labels">Labels.</param>
            <returns>List of label metadata.</returns>
        </member>
        <member name="M:LiteGraph.LabelMetadata.ToListString(System.Collections.Generic.List{LiteGraph.LabelMetadata})">
            <summary>
            Create a list of strings for all labels in the list.
            </summary>
            <param name="labels">Labels.</param>
            <returns>Labels.</returns>
        </member>
        <member name="T:LiteGraph.LiteGraphClient">
            <summary>
            LiteGraph client.
            </summary>
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Logging">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Serializer">
            <summary>
            Serialization helper.
            </summary>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.#ctor(LiteGraph.GraphRepositories.GraphRepositoryBase,LiteGraph.LoggingSettings)">
            <summary>
            Instantiate LiteGraph client.
            </summary>
            <param name="repo">Graph repository driver.</param>
            <param name="logging">Logging.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.Dispose">
            <summary>
            Tear down the client and dispose of resources.
            </summary>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.InitializeRepository">
            <summary>
            Initialize the repository.
            </summary>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ConvertData``1(System.Object)">
            <summary>
            Convert data associated with a graph, node, or edge to a specific type.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="data">Data.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateTenant(LiteGraph.TenantMetadata)">
            <summary>
            Create a tenant.
            </summary>
            <param name="tenant">Tenant.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateTenant(System.Guid,System.String)">
            <summary>
            Create a tenant using a unique name.
            </summary>
            <param name="guid">GUID.</param>
            <param name="name">Unique name.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadTenants(LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read tenants.
            </summary>
            <param name="order">Enumeration order.</param>
            <returns>Tenants.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadTenant(System.Guid)">
            <summary>
            Read a tenant by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateTenant(LiteGraph.TenantMetadata)">
            <summary>
            Update a tenant.
            </summary>
            <param name="tenant">Tenant.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteTenant(System.Guid,System.Boolean)">
            <summary>
            Delete a tenant.
            </summary>
            <param name="guid">GUID.</param>
            <param name="force">True to force deletion of subordinate objects.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsTenant(System.Guid)">
            <summary>
            Check if a tenant exists by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateUser(LiteGraph.UserMaster)">
            <summary>
            Create a user.
            </summary>
            <param name="user">User.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateUser(System.Guid,System.Guid,System.String,System.String,System.String,System.String)">
            <summary>
            Create a user using a unique name.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="firstName">First name.</param>
            <param name="lastName">Last name.</param>
            <param name="email">Email.</param>
            <param name="password">Password.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadUsers(System.Guid,System.String,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read users.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="email">Email.</param>
            <param name="order">Enumeration order.</param>
            <returns>Users.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadUser(System.Guid,System.Guid)">
            <summary>
            Read a user by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateUser(LiteGraph.UserMaster)">
            <summary>
            Update a user.
            </summary>
            <param name="user">User.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteUser(System.Guid,System.Guid)">
            <summary>
            Delete a user.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsUser(System.Guid,System.Guid)">
            <summary>
            Check if a user exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateCredential(LiteGraph.Credential)">
            <summary>
            Create a credential.
            </summary>
            <param name="cred">Credential.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateCredential(System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Create a credential using a unique name.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="userGuid">User GUID.</param>
            <param name="guid">GUID.</param>
            <param name="name">Name.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadCredentials(System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read credentials.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="userGuid">User GUID.</param>
            <param name="bearerToken">Bearer token.</param>
            <param name="order">Enumeration order.</param>
            <returns>Credentials.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadCredential(System.Guid,System.Guid)">
            <summary>
            Read a credential by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateCredential(LiteGraph.Credential)">
            <summary>
            Update a credential.
            </summary>
            <param name="credential">Credential.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteCredential(System.Guid,System.Guid)">
            <summary>
            Delete a credential.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsCredential(System.Guid,System.Guid)">
            <summary>
            Check if a credential exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateLabel(LiteGraph.LabelMetadata)">
            <summary>
            Create a label.
            </summary>
            <param name="label">Label.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateLabel(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String)">
            <summary>
            Create a label using a unique name.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="label">Label.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadLabels(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="label">Label.</param>
            <param name="order">Enumeration order.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadLabel(System.Guid,System.Guid)">
            <summary>
            Read a label by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateLabel(LiteGraph.LabelMetadata)">
            <summary>
            Update a label.
            </summary>
            <param name="label">LabelMetadata.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteLabel(System.Guid,System.Guid)">
            <summary>
            Delete a label.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsLabelMetadata(System.Guid,System.Guid)">
            <summary>
            Check if a label exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateTag(LiteGraph.TagMetadata)">
            <summary>
            Create a tag.
            </summary>
            <param name="tag">Tag.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateTag(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String)">
            <summary>
            Create a tag using a unique name.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadTags(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
            <param name="order">Enumeration order.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadTag(System.Guid,System.Guid)">
            <summary>
            Read a tag by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateTag(LiteGraph.TagMetadata)">
            <summary>
            Update a tag.
            </summary>
            <param name="tag">TagMetadata.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteTag(System.Guid,System.Guid)">
            <summary>
            Delete a tag.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsTagMetadata(System.Guid,System.Guid)">
            <summary>
            Check if a tag exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateVector(LiteGraph.VectorMetadata)">
            <summary>
            Create a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadVectors(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="order">Enumeration order.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadVector(System.Guid,System.Guid)">
            <summary>
            Read a vector by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateVector(LiteGraph.VectorMetadata)">
            <summary>
            Update a vector.
            </summary>
            <param name="vector">VectorMetadata.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteVector(System.Guid,System.Guid)">
            <summary>
            Delete a vector.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsVectorMetadata(System.Guid,System.Guid)">
            <summary>
            Check if a vector exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.SearchVectors(LiteGraph.VectorSearchRequest)">
            <summary>
            Search vectors.
            </summary>
            <param name="searchReq">Vector search request.</param>
            <returns>Vector search results.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.SearchVectors(LiteGraph.VectorSearchDomainEnum,LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <summary>
            Search vectors.
            </summary>
            <param name="domain">Vector search domain.</param>
            <param name="searchType">Vector search type.</param>
            <param name="vectors">Vectors.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="filter">Filter.</param>
            <returns></returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateGraph(System.Guid,System.Guid,System.String,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,System.Collections.Generic.List{LiteGraph.VectorMetadata},System.Object)">
            <summary>
            Create a graph using a unique name.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="name">Unique name.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="data">Data.</param>
            <param name="vectors">Vectors.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadGraphs(System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read graphs.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels on which to filter results.</param>
            <param name="tags">Tags on which to filter results.</param>
            <param name="expr">
            Graph filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Graphs.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadGraph(System.Guid,System.Guid)">
            <summary>
            Read a graph by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateGraph(LiteGraph.Graph)">
            <summary>
            Update a graph.
            </summary>
            <param name="graph">Graph.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteGraph(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Delete a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">GUID.</param>
            <param name="force">True to force deletion of nodes and edges.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsGraph(System.Guid,System.Guid)">
            <summary>
            Check if a graph exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExportGraphToGexfFile(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Export graph to GEXF.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="filename">Filename.</param>
            <param name="includeData">True to include data.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.RenderGraphAsGexf(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Render a graph as GEXF.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid"></param>
            <param name="includeData"></param>
            <returns></returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateNode(LiteGraph.Node)">
            <summary>
            Create a node.
            </summary>
            <param name="node">Node.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateNodes(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Node})">
            <summary>
            Create nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodes">Nodes.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadNodes(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels on which to filter results.</param>
            <param name="tags">Tags on which to filter results.</param>
            <param name="expr">
            Node filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadNode(System.Guid,System.Guid,System.Guid)">
            <summary>
            Read node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateNode(LiteGraph.Node)">
            <summary>
            Update node.
            </summary>
            <param name="node"></param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteNode(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete a node and all associated edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteNodes(System.Guid,System.Guid)">
            <summary>
            Delete all nodes associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteNodes(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete specific nodes associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsNode(System.Guid,System.Guid,System.Guid)">
            <summary>
            Check existence of a node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateEdge(LiteGraph.Edge)">
            <summary>
            Create an edge between two nodes.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateEdges(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Edge})">
            <summary>
            Create edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edges">Edges.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateEdge(System.Guid,System.Guid,LiteGraph.Node,LiteGraph.Node,System.String,System.Int32,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,System.Object)">
            <summary>
            Create an edge between two nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNode">From node.</param>
            <param name="toNode">To node.</param>
            <param name="name">Name.</param>
            <param name="cost">Cost.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="data">Data.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels on which to filter results.</param>
            <param name="tags">Tags on which to filter results.</param>
            <param name="expr">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadEdge(System.Guid,System.Guid,System.Guid)">
            <summary>
            Read edge.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateEdge(LiteGraph.Edge)">
            <summary>
            Update edge.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteEdge(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete edge.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteEdges(System.Guid,System.Guid)">
            <summary>
            Delete all edges associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete specific edges associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsEdge(System.Guid,System.Guid,System.Guid)">
            <summary>
            Check if an edge exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.BatchExistence(System.Guid,System.Guid,LiteGraph.ExistenceRequest)">
            <summary>
            Batch existence check.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="req">Existence request.</param>
            <returns>Existence result.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetParents(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get parents for a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetChildren(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get children for a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetNeighbors(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get neighbors for a given node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetRoutes(LiteGraph.SearchTypeEnum,System.Guid,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr)">
            <summary>
            Get routes between two nodes.
            </summary>
            <param name="searchType">Search type.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <returns>Route details.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetEdgesFrom(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get edges from a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="labels">Labels on which to filter edges.</param>
            <param name="tags">Tags on which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetEdgesTo(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get edges to a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="labels">Labels on which to filter edges.</param>
            <param name="tags">Tags on which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetEdgesBetween(System.Guid,System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get edges between two nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="labels">Labels on which to filter edges.</param>
            <param name="tags">Tags on which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.Dispose(System.Boolean)">
            <summary>
            Dispose of the object.
            </summary>
            <param name="disposing">Disposing of resources.</param>
        </member>
        <member name="T:LiteGraph.LoggingSettings">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Enable">
            <summary>
            Enable or disable logging.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Servers">
            <summary>
            List of syslog servers.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogDirectory">
            <summary>
            Log directory.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogFilename">
            <summary>
            Log filename.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.ConsoleLogging">
            <summary>
            Enable or disable console logging.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.EnableColors">
            <summary>
            Enable colors in logging.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.MinimumSeverity">
            <summary>
            Minimum severity.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Header">
            <summary>
            Header to prepend to emitted messages.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Logger">
            <summary>
            Method to invoke to send log messages.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogQueries">
            <summary>
            Enable or disable logging of queries.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogResults">
            <summary>
            Enable or disable logging of results.
            </summary>
        </member>
        <member name="M:LiteGraph.LoggingSettings.#ctor">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="M:LiteGraph.LoggingSettings.Log(LiteGraph.SeverityEnum,System.String)">
            <summary>
            Emit a log message.
            </summary>
            <param name="sev">Severity.</param>
            <param name="msg">Message.</param>
        </member>
        <member name="T:LiteGraph.Node">
            <summary>
            Node in the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.GraphGUID">
            <summary>
            Globally-unique identifier for the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Labels">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Tags">
            <summary>
            Tags.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Vectors">
            <summary>
            Vectors.
            </summary>
        </member>
        <member name="M:LiteGraph.Node.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.RouteDetail">
            <summary>
            Total cost and ordered list of edges between two nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.RouteDetail.TotalCost">
            <summary>
            Total cost of the route.
            </summary>
        </member>
        <member name="P:LiteGraph.RouteDetail.Edges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="M:LiteGraph.RouteDetail.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.SearchRequest">
            <summary>
            Search request.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Ordering">
            <summary>
            Ordering.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Skip">
            <summary>
            The number of records to skip.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Labels">
            <summary>
            Search labels.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Tags">
            <summary>
            Search tags.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Expr">
            <summary>
            Expression.
            </summary>
        </member>
        <member name="M:LiteGraph.SearchRequest.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.SearchResult">
            <summary>
            Search result.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchResult.Graphs">
            <summary>
            Graphs.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchResult.Nodes">
            <summary>
            Nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchResult.Edges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="M:LiteGraph.SearchResult.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.SearchTypeEnum">
            <summary>
            Search type.
            </summary>
        </member>
        <member name="F:LiteGraph.SearchTypeEnum.DepthFirstSearch">
            <summary>
            Depth first search.
            </summary>
        </member>
        <member name="T:LiteGraph.Serialization.ISerializer">
            <summary>
            Serializer interface.
            </summary>
        </member>
        <member name="M:LiteGraph.Serialization.ISerializer.CopyObject``1(``0)">
            <summary>
            Copy an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="obj">Object.</param>
            <returns>Copied object.</returns>
        </member>
        <member name="M:LiteGraph.Serialization.ISerializer.SerializeJson(System.Object,System.Boolean)">
            <summary>
            Serialize an object to JSON.
            </summary>
            <param name="obj">Object.</param>
            <param name="pretty">Enable or disable pretty formatting.</param>
            <returns></returns>
        </member>
        <member name="M:LiteGraph.Serialization.ISerializer.DeserializeJson``1(System.String)">
            <summary>
            Deserialize an object to JSON.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="json">JSON.</param>
            <returns>Instance.</returns>
        </member>
        <member name="T:LiteGraph.Serialization.SerializationHelper">
            <summary>
            Serialization helper.
            </summary>
        </member>
        <member name="M:LiteGraph.Serialization.SerializationHelper.CopyObject``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:LiteGraph.Serialization.SerializationHelper.DeserializeJson``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LiteGraph.Serialization.SerializationHelper.SerializeJson(System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:LiteGraph.SeverityEnum">
            <summary>
            Message severity.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Debug">
            <summary>
            Debug messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Info">
            <summary>
            Informational messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Warn">
            <summary>
            Warning messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Error">
            <summary>
            Error messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Alert">
            <summary>
            Alert messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Critical">
            <summary>
            Critical messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Emergency">
            <summary>
            Emergency messages.
            </summary>
        </member>
        <member name="T:LiteGraph.SyslogServer">
            <summary>
            Syslog server settings.
            </summary>
        </member>
        <member name="P:LiteGraph.SyslogServer.Hostname">
            <summary>
            Hostname.
            </summary>
        </member>
        <member name="P:LiteGraph.SyslogServer.Port">
            <summary>
            Port.
            </summary>
        </member>
        <member name="M:LiteGraph.SyslogServer.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.SyslogServer.#ctor(System.String,System.Int32)">
            <summary>
            Instantiate.
            </summary>
            <param name="hostname">Hostname.</param>
            <param name="port">Port.</param>
        </member>
        <member name="T:LiteGraph.TagMetadata">
            <summary>
            Tag metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.NodeGUID">
            <summary>
            Node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.EdgeGUID">
            <summary>
            Edge GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.TagMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.TagMetadata.ToNameValueCollection(System.Collections.Generic.List{LiteGraph.TagMetadata})">
            <summary>
            Convert a list of tag metadata to a name value collection.
            </summary>
            <param name="tags">Tags.</param>
            <returns>Name value collection.</returns>
        </member>
        <member name="M:LiteGraph.TagMetadata.FromNameValueCollection(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Collections.Specialized.NameValueCollection)">
            <summary>
            Convert a dictionary to a list of tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="nvc">Name value collection.</param>
            <returns>List of tags.</returns>
        </member>
        <member name="M:LiteGraph.TagMetadata.FromTags(System.Collections.Generic.List{LiteGraph.TagMetadata},System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Retrieve tags from a given name value collection.
            </summary>
            <param name="tags">Tags.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>Name value collection.</returns>
        </member>
        <member name="T:LiteGraph.TenantMetadata">
            <summary>
            Tenant metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantMetadata.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantMetadata.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantMetadata.CreatedUtc">
            <summary>
            Created timestamp, in UTC timestamp.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.TenantMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.UserMaster">
            <summary>
            User.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.FirstName">
            <summary>
            First name.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.LastName">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.Email">
            <summary>
            Email.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.CreatedUtc">
            <summary>
            Creation time, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.UserMaster.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.VectorMetadata">
            <summary>
            Vector metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.NodeGUID">
            <summary>
            Node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.EdgeGUID">
            <summary>
            Edge GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.Model">
            <summary>
            Model.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.Dimensionality">
            <summary>
            Dimensionality.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.Content">
            <summary>
            Content.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.Vectors">
            <summary>
            Vectors.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.VectorMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.VectorMetadata.FromFloatsList(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Collections.Generic.List{System.Collections.Generic.List{System.Single}})">
            <summary>
            Create a list of vector metadata from a list of floats.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="embeddings">Embeddings.</param>
            <returns>List of vector metadata.</returns>
        </member>
        <member name="M:LiteGraph.VectorMetadata.ToListString(System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <summary>
            Create a list float lists for all vector metadata entries.
            </summary>
            <param name="vectors">Vectors.</param>
            <returns>Labels.</returns>
        </member>
        <member name="T:LiteGraph.VectorSearchDomainEnum">
            <summary>
            Vector search domain.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchDomainEnum.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchDomainEnum.Node">
            <summary>
            Node.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchDomainEnum.Edge">
            <summary>
            Edge.
            </summary>
        </member>
        <member name="T:LiteGraph.VectorSearchRequest">
            <summary>
            Vector search request.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.Domain">
            <summary>
            Vector search domain.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.SearchType">
            <summary>
            Vector search type.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.Labels">
            <summary>
            Search labels.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.Tags">
            <summary>
            Search tags.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.Expr">
            <summary>
            Expression.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.Embeddings">
            <summary>
            Embeddings.
            </summary>
        </member>
        <member name="M:LiteGraph.VectorSearchRequest.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.VectorSearchResult">
            <summary>
            Vector search result.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.Score">
            <summary>
            Score.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.Distance">
            <summary>
            Distance.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.InnerProduct">
            <summary>
            Inner product.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.Node">
            <summary>
            Node.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.Edge">
            <summary>
            Edge.
            </summary>
        </member>
        <member name="M:LiteGraph.VectorSearchResult.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.VectorSearchTypeEnum">
            <summary>
            Vector search type.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchTypeEnum.CosineDistance">
            <summary>
            Cosine distance, the inverse of cosine similarity.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchTypeEnum.CosineSimilarity">
            <summary>
            Cosine similarity, the inverse of cosine distance.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchTypeEnum.EuclidianDistance">
            <summary>
            Euclidian distance, also known as L2 distance, the inverse of Euclidian similarity or L2 similarity.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchTypeEnum.EuclidianSimilarity">
            <summary>
            Euclidian simmilarity, also known as L2 similarity, the inverse of Euclidian distance or L2 distance.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchTypeEnum.DotProduct">
            <summary>
            Dot product similarity.  Equivalent to cosine similarity when vectors are normalized, that is, magnitudes are all 1.
            </summary>
        </member>
    </members>
</doc>
