<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LiteGraph</name>
    </assembly>
    <members>
        <member name="T:LiteGraph.Constants">
            <summary>
            Constants.
            </summary>
        </member>
        <member name="F:LiteGraph.Constants.LogDirectory">
            <summary>
            Log file directory.
            </summary>
        </member>
        <member name="F:LiteGraph.Constants.LogFilename">
            <summary>
            Log filename.
            </summary>
        </member>
        <member name="T:LiteGraph.Edge">
            <summary>
            Edge in the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.GraphGUID">
            <summary>
            Globally-unique identifier for the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.From">
            <summary>
            Globally-unique identifier of the from node.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.FromNode">
            <summary>
            From node.  This property is only populated when retrieving routes.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.To">
            <summary>
            Globally-unique identifier of the to node.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.ToNode">
            <summary>
            To node.  This property is only populated when retrieving routes.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Cost">
            <summary>
            Cost.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="M:LiteGraph.Edge.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.EnumerationOrderEnum">
            <summary>
            Enumeration order.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CreatedAscending">
            <summary>
            Created ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CreatedDescending">
            <summary>
            Created descending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.NameAscending">
            <summary>
            Name ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.NameDescending">
            <summary>
            Name descending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.GuidAscending">
            <summary>
            GUID ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.GuidDescending">
            <summary>
            GUID descending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CostAscending">
            <summary>
            Cost ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CostDescending">
            <summary>
            Cost descending.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.Metadata">
            <summary>
            Document metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Metadata.Creator">
            <summary>
            Document creator.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Metadata.Description">
            <summary>
            Document description.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Metadata.LastModifiedDate">
            <summary>
            Last modified date.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.Metadata.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.Attribute">
            <summary>
            Attribute.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Attribute.Id">
            <summary>
            Attribute ID.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Attribute.Title">
            <summary>
            Attribute title.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Attribute.Type">
            <summary>
            Attribute type.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Attribute.Default">
            <summary>
            Attribute default value.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.Attribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="id">Attribute ID.</param>
            <param name="title">Attribute title.</param>
            <param name="type">Attribute type.</param>
        </member>
        <member name="M:LiteGraph.Gexf.Attribute.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.Attributes">
            <summary>
            Attributes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Attributes.AttributeList">
            <summary>
            Attributes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Attributes.Class">
            <summary>
            Attribute class, i.e. 'node' or 'edge'.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.Attributes.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.AttributeValue">
            <summary>
            Attribute value.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.AttributeValue.For">
            <summary>
            ID of the object to which the attribute is assigned.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.AttributeValue.Value">
            <summary>
            Value of the attribute.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.AttributeValue.#ctor(System.String,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="forGuid">ID of the object to which the attribute is assigned.</param>
            <param name="value">Value of the attribute.</param>
        </member>
        <member name="M:LiteGraph.Gexf.AttributeValue.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.AttributeValues">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.AttributeValues.Values">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.AttributeValues.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfNode">
            <summary>
            Node.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNode.ValueList">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNode.Id">
            <summary>
            ID.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNode.Label">
            <summary>
            Label.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfNode.#ctor(System.Guid,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="id">ID.</param>
            <param name="label">Label.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfNode.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfNodes">
            <summary>
            Nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNodes.Nodes">
            <summary>
            List of nodes.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfNodes.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfEdges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdges.Edges">
            <summary>
            List of edges.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfEdges.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfEdge">
            <summary>
            Edge.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.ValueList">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.Id">
            <summary>
            ID.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.Source">
            <summary>
            Source.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.Target">
            <summary>
            Target.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfEdge.#ctor(System.Guid,System.Guid,System.Guid)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="id">ID.</param>
            <param name="source">Source.</param>
            <param name="target">Target.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfEdge.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Graph.Attributes">
            <summary>
            Attributes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Graph.NodeList">
            <summary>
            Nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Graph.EdgeList">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Graph.DefaultEdgeType">
            <summary>
            Default edge type, i.e. 'directed'.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.Graph.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.Document">
            <summary>
            Graph Exchange XML Format document.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Document.Meta">
            <summary>
            Document metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Document.Graph">
            <summary>
            Graph.  
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Document.Xmlns">
            <summary>
            XML namespace.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Document.SchemaLocation">
            <summary>
            Schema location.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.Document.Version">
            <summary>
            Version.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.Document.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfWriter">
            <summary>
            GEXF file writer.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfWriter.#ctor(LiteGraph.Serialization.SerializationHelper)">
            <summary>
            Instantiate.
            </summary>
            <param name="serializer">Serializer.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfWriter.ExportToFile(LiteGraph.LiteGraphClient,System.Guid,System.String,System.Boolean)">
            <summary>
            Write a GEXF file.
            </summary>
            <param name="client">LiteGraphClient.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="filename">Output filename.</param>
            <param name="includeData">True to include node and edge data.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfWriter.RenderAsGexf(LiteGraph.LiteGraphClient,System.Guid,System.Boolean)">
            <summary>
            Render a graph as a GEXF string.
            </summary>
            <param name="client">LiteGraphClient.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="includeData">True to include node and edge data.</param>
            <returns>GEXF document.</returns>
        </member>
        <member name="T:LiteGraph.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="M:LiteGraph.Graph.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.LiteGraphClient">
            <summary>
            LiteGraph client.
            </summary>
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Logging">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="P:LiteGraph.LiteGraphClient.MaxConcurrentOperations">
            <summary>
            Maximum number of concurrent operations.
            For higher concurrency, use a lower number (e.g. 1).
            For lower concurrency, use a higher number (e.g. 10).
            This value dictates the maximum number of operations that may be operating in parallel at any one given time.
            </summary>
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Serializer">
            <summary>
            Serialization helper.
            </summary>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.#ctor(LiteGraph.Repositories.RepositoryBase,LiteGraph.LoggingSettings,System.Int32)">
            <summary>
            Instantiate LiteGraph client.
            </summary>
            <param name="repository">Repository driver.</param>
            <param name="logging">Logging.</param>
            <param name="maxConcurrentOperations">
            Maximum number of concurrent operations allowed.  
            For higher concurrency, use a lower number (e.g. 1).
            For lower concurrency, use a higher number (e.g. 10).
            This value dictates the maximum number of operations that may be operating in parallel at any one given time.
            </param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.Dispose">
            <summary>
            Tear down the client and dispose of resources.
            </summary>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.InitializeRepository">
            <summary>
            Initialize the repository.
            </summary>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ConvertData``1(System.Object)">
            <summary>
            Convert data associated with a graph, node, or edge to a specific type.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="data">Data.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateGraph(System.String,System.Object)">
            <summary>
            Create a graph using a unique name.
            </summary>
            <param name="name">Unique name.</param>
            <param name="data">Data.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadGraphs(ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read graphs.
            </summary>
            <param name="expr">
            Graph filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Graphs.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadGraph(System.Guid)">
            <summary>
            Read a graph by GUID.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateGraph(LiteGraph.Graph)">
            <summary>
            Update a graph.
            </summary>
            <param name="graph">Graph.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteGraph(System.Guid,System.Boolean)">
            <summary>
            Delete a graph.
            </summary>
            <param name="graphGuid">GUID.</param>
            <param name="force">True to force deletion of nodes and edges.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsGraph(System.Guid)">
            <summary>
            Check if a graph exists by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExportGraphToGexfFile(System.Guid,System.String,System.Boolean)">
            <summary>
            Export graph to GEXF.
            </summary>
            <param name="guid">GUID.</param>
            <param name="filename">Filename.</param>
            <param name="includeData">True to include data.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.RenderGraphAsGexf(System.Guid,System.Boolean)">
            <summary>
            Render a graph as GEXF.
            </summary>
            <param name="guid"></param>
            <param name="includeData"></param>
            <returns></returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateNode(LiteGraph.Node)">
            <summary>
            Create a node.
            </summary>
            <param name="node">Node.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadNodes(System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read nodes.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="expr">
            Node filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadNode(System.Guid,System.Guid)">
            <summary>
            Read node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateNode(LiteGraph.Node)">
            <summary>
            Update node.
            </summary>
            <param name="node"></param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteNode(System.Guid,System.Guid)">
            <summary>
            Delete a node and all associated edges.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsNode(System.Guid,System.Guid)">
            <summary>
            Check existence of a node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateEdge(LiteGraph.Edge)">
            <summary>
            Create an edge between two nodes.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.CreateEdge(System.Guid,LiteGraph.Node,LiteGraph.Node,System.String,System.Int32,System.Object)">
            <summary>
            Create an edge between two nodes.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNode">From node.</param>
            <param name="toNode">To node.</param>
            <param name="name">Name.</param>
            <param name="cost">Cost.</param>
            <param name="data">Data.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadEdges(System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read edges.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="expr">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ReadEdge(System.Guid,System.Guid)">
            <summary>
            Read edge.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.UpdateEdge(LiteGraph.Edge)">
            <summary>
            Update edge.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.DeleteEdge(System.Guid,System.Guid)">
            <summary>
            Delete edge.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExistsEdge(System.Guid,System.Guid)">
            <summary>
            Check if an edge exists by GUID.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetParents(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get parents for a given node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetChildren(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get children for a given node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetNeighbors(System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get neighbors for a given node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetRoutes(LiteGraph.SearchTypeEnum,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr)">
            <summary>
            Get routes between two nodes.
            </summary>
            <param name="searchType">Search type.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <returns>Route details.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetEdgesFrom(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get edges from a given node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetEdgesTo(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get edges to a given node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.GetEdgesBetween(System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get edges between two nodes.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.Dispose(System.Boolean)">
            <summary>
            Dispose of the object.
            </summary>
            <param name="disposing">Disposing of resources.</param>
        </member>
        <member name="T:LiteGraph.LoggingSettings">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Enable">
            <summary>
            Enable or disable logging.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Servers">
            <summary>
            List of syslog servers.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogDirectory">
            <summary>
            Log directory.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogFilename">
            <summary>
            Log filename.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.ConsoleLogging">
            <summary>
            Enable or disable console logging.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.EnableColors">
            <summary>
            Enable colors in logging.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.MinimumSeverity">
            <summary>
            Minimum severity.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Header">
            <summary>
            Header to prepend to emitted messages.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Logger">
            <summary>
            Method to invoke to send log messages.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogQueries">
            <summary>
            Enable or disable logging of queries.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogResults">
            <summary>
            Enable or disable logging of results.
            </summary>
        </member>
        <member name="M:LiteGraph.LoggingSettings.#ctor">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="M:LiteGraph.LoggingSettings.Log(LiteGraph.SeverityEnum,System.String)">
            <summary>
            Emit a log message.
            </summary>
            <param name="sev">Severity.</param>
            <param name="msg">Message.</param>
        </member>
        <member name="T:LiteGraph.Node">
            <summary>
            Node in the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.GraphGUID">
            <summary>
            Globally-unique identifier for the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.Node.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Repositories.RepositoryBase">
            <summary>
            Repository base class.
            </summary>
        </member>
        <member name="P:LiteGraph.Repositories.RepositoryBase.Logging">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="P:LiteGraph.Repositories.RepositoryBase.Serializer">
            <summary>
            Serialization helper.
            </summary>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.InitializeRepository">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.CreateGraph(System.String,System.Object)">
            <summary>
            Create a graph using a unique name.
            </summary>
            <param name="name">Unique name.</param>
            <param name="data">Data.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.ReadGraphs(ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read graphs.
            </summary>
            <param name="graphFilter">
            Graph filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Graphs.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.ReadGraph(System.Guid)">
            <summary>
            Read a graph by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.UpdateGraph(LiteGraph.Graph)">
            <summary>
            Update a graph.
            </summary>
            <param name="graph">Graph.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.DeleteGraph(System.Guid,System.Boolean)">
            <summary>
            Delete a graph.
            </summary>
            <param name="guid">GUID.</param>
            <param name="force">True to force deletion of nodes and edges.</param>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.ExistsGraph(System.Guid)">
            <summary>
            Check if a graph exists by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.CreateNode(LiteGraph.Node)">
            <summary>
            Create a node.
            </summary>
            <param name="node">Node.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.ReadNodes(System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read nodes.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.  
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.ReadNode(System.Guid,System.Guid)">
            <summary>
            Read node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.UpdateNode(LiteGraph.Node)">
            <summary>
            Update node.
            </summary>
            <param name="node"></param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.DeleteNode(System.Guid,System.Guid)">
            <summary>
            Delete a node and all associated edges.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.DeleteNodes(System.Guid)">
            <summary>
            Delete all nodes from a graph.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.ExistsNode(System.Guid,System.Guid)">
            <summary>
            Check existence of a node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.CreateEdge(LiteGraph.Edge)">
            <summary>
            Create an edge between two nodes.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.ReadEdges(System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read edges.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.ReadEdge(System.Guid,System.Guid)">
            <summary>
            Read edge.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.UpdateEdge(LiteGraph.Edge)">
            <summary>
            Update edge.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.DeleteEdge(System.Guid,System.Guid)">
            <summary>
            Delete edge.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.DeleteEdges(System.Guid)">
            <summary>
            Delete all edges from a graph.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.ExistsEdge(System.Guid,System.Guid)">
            <summary>
            Check if an edge exists by GUID.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.GetParents(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get nodes that have edges connecting to the specified node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.GetChildren(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get nodes to which the specified node has connecting edges connecting.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.GetNeighbors(System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get neighbors for a given node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.GetRoutes(LiteGraph.SearchTypeEnum,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr)">
            <summary>
            Get routes between two nodes.
            </summary>
            <param name="searchType">Search type.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <returns>Route details.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.GetConnectedEdges(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get edges connected to or initiated from a given node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.GetEdgesFrom(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get edges from a given node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.GetEdgesTo(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get edges to a given node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Repositories.RepositoryBase.GetEdgesBetween(System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Get edges between two neighboring nodes.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edges.</returns>
        </member>
        <member name="T:LiteGraph.Repositories.SqliteRepository">
            <summary>
            Sqlite repository.
            </summary>
        </member>
        <member name="P:LiteGraph.Repositories.SqliteRepository.Filename">
            <summary>
            Sqlite database filename.
            </summary>
        </member>
        <member name="P:LiteGraph.Repositories.SqliteRepository.MaxStatementLength">
            <summary>
            Maximum supported statement length.
            Default for Sqlite is 1000000 (see https://www.sqlite.org/limits.html).
            </summary>
        </member>
        <member name="P:LiteGraph.Repositories.SqliteRepository.SelectBatchSize">
            <summary>
            Number of records to retrieve for object list retrieval.
            </summary>
        </member>
        <member name="P:LiteGraph.Repositories.SqliteRepository.TimestampFormat">
            <summary>
            Timestamp format.
            </summary>
        </member>
        <member name="P:LiteGraph.Repositories.SqliteRepository.IndexData">
            <summary>
            True to enable a full-text index over node and edge data properties.
            </summary>
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.#ctor(System.String)">
            <summary>
            Instantiate.
            </summary>
            <param name="filename">Sqlite database filename.</param>
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.InitializeRepository">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.CreateGraph(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.ReadGraphs(ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.ReadGraph(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.UpdateGraph(LiteGraph.Graph)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.DeleteGraph(System.Guid,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.ExistsGraph(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.CreateNode(LiteGraph.Node)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.ReadNodes(System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.ReadNode(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.UpdateNode(LiteGraph.Node)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.DeleteNode(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.DeleteNodes(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.ExistsNode(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.GetParents(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.GetChildren(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.GetNeighbors(System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.GetRoutes(LiteGraph.SearchTypeEnum,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.GetConnectedEdges(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.GetEdgesFrom(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.GetEdgesTo(System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.GetEdgesBetween(System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.CreateEdge(LiteGraph.Edge)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.ReadEdges(System.Guid,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.ReadEdge(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.UpdateEdge(LiteGraph.Edge)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.DeleteEdge(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.DeleteEdges(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Repositories.SqliteRepository.ExistsEdge(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.RouteDetail">
            <summary>
            Total cost and ordered list of edges between two nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.RouteDetail.TotalCost">
            <summary>
            Total cost of the route.
            </summary>
        </member>
        <member name="P:LiteGraph.RouteDetail.Edges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="M:LiteGraph.RouteDetail.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.SearchRequest">
            <summary>
            Search request.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Ordering">
            <summary>
            Ordering.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Expr">
            <summary>
            Expression.
            </summary>
        </member>
        <member name="M:LiteGraph.SearchRequest.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.SearchResult">
            <summary>
            Search result.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchResult.Graphs">
            <summary>
            Graphs.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchResult.Nodes">
            <summary>
            Nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchResult.Edges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="M:LiteGraph.SearchResult.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.SearchTypeEnum">
            <summary>
            Search type.
            </summary>
        </member>
        <member name="F:LiteGraph.SearchTypeEnum.DepthFirstSearch">
            <summary>
            Depth first search.
            </summary>
        </member>
        <member name="T:LiteGraph.Serialization.ISerializer">
            <summary>
            Serializer interface.
            </summary>
        </member>
        <member name="M:LiteGraph.Serialization.ISerializer.CopyObject``1(``0)">
            <summary>
            Copy an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="obj">Object.</param>
            <returns>Copied object.</returns>
        </member>
        <member name="M:LiteGraph.Serialization.ISerializer.SerializeJson(System.Object,System.Boolean)">
            <summary>
            Serialize an object to JSON.
            </summary>
            <param name="obj">Object.</param>
            <param name="pretty">Enable or disable pretty formatting.</param>
            <returns></returns>
        </member>
        <member name="M:LiteGraph.Serialization.ISerializer.DeserializeJson``1(System.String)">
            <summary>
            Deserialize an object to JSON.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="json">JSON.</param>
            <returns>Instance.</returns>
        </member>
        <member name="T:LiteGraph.Serialization.SerializationHelper">
            <summary>
            Serialization helper.
            </summary>
        </member>
        <member name="M:LiteGraph.Serialization.SerializationHelper.CopyObject``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:LiteGraph.Serialization.SerializationHelper.DeserializeJson``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LiteGraph.Serialization.SerializationHelper.SerializeJson(System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:LiteGraph.SeverityEnum">
            <summary>
            Message severity.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Debug">
            <summary>
            Debug messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Info">
            <summary>
            Informational messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Warn">
            <summary>
            Warning messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Error">
            <summary>
            Error messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Alert">
            <summary>
            Alert messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Critical">
            <summary>
            Critical messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Emergency">
            <summary>
            Emergency messages.
            </summary>
        </member>
        <member name="T:LiteGraph.SyslogServer">
            <summary>
            Syslog server settings.
            </summary>
        </member>
        <member name="P:LiteGraph.SyslogServer.Hostname">
            <summary>
            Hostname.
            </summary>
        </member>
        <member name="P:LiteGraph.SyslogServer.Port">
            <summary>
            Port.
            </summary>
        </member>
        <member name="P:LiteGraph.SyslogServer.RandomizePorts">
            <summary>
            Boolean to indicate whether or not randomized port numbers should be used.
            If false, the value in 'Port' will be used.
            </summary>
        </member>
        <member name="P:LiteGraph.SyslogServer.MinimumPort">
            <summary>
            Minimum port.
            </summary>
        </member>
        <member name="P:LiteGraph.SyslogServer.MaximumPort">
            <summary>
            Maximum port.
            </summary>
        </member>
        <member name="M:LiteGraph.SyslogServer.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.SyslogServer.#ctor(System.String,System.Int32)">
            <summary>
            Instantiate.
            </summary>
            <param name="hostname">Hostname.</param>
            <param name="port">Port.</param>
        </member>
        <member name="M:LiteGraph.SyslogServer.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Instantiate.
            </summary>
            <param name="hostname">Hostname.</param>
            <param name="minPort">Minimum port number.</param>
            <param name="maxPort">Maximum port number.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
    </members>
</doc>
