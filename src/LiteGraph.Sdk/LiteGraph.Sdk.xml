<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LiteGraph.Sdk</name>
    </assembly>
    <members>
        <member name="T:LiteGraph.Sdk.Edge">
            <summary>
            Edge in the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.GraphGUID">
            <summary>
            Globally-unique identifier for the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.From">
            <summary>
            Globally-unique identifier of the from node.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.To">
            <summary>
            Globally-unique identifier of the to node.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.Cost">
            <summary>
            Cost.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Edge.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.EnumerationOrderEnum">
            <summary>
            Enumeration order.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.CreatedAscending">
            <summary>
            Created ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.CreatedDescending">
            <summary>
            Created descending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.NameAscending">
            <summary>
            Name ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.NameDescending">
            <summary>
            Name descending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.GuidAscending">
            <summary>
            GUID ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.GuidDescending">
            <summary>
            GUID descending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.CostAscending">
            <summary>
            Cost ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.CostDescending">
            <summary>
            Cost descending.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.Expr">
            <summary>
            Expression.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Expr.Left">
            <summary>
            Left term.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Expr.Operator">
            <summary>
            Operator.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Expr.Right">
            <summary>
            Right term.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.#ctor(System.Object,LiteGraph.Sdk.OperatorEnum,System.Object)">
            <summary>
            A structure in the form of term-operator-term that defines a Boolean evaluation.
            A term can be a literal value, an embedded Expr object, or a list.
            List and Array objects can only be supplied on the right side of an expression.
            </summary>
            <param name="left">The left term of the expression.</param>
            <param name="oper">The operator.</param>
            <param name="right">The right term of the expression.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.Between(System.Object,System.Collections.Generic.List{System.Object})">
            <summary>
            An expression that allows you to determine if an object is between two values, i.e. GreaterThanOrEqualTo the first value, and LessThanOrEqualTo the second value.
            </summary>
            <param name="left">The left term of the expression; can either be a string term or a nested expression.</param> 
            <param name="right">List of two values where the first value is the lower value and the second value is the higher value.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.ToString">
            <summary>
            String representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.PrependAnd(System.Object,LiteGraph.Sdk.OperatorEnum,System.Object)">
            <summary>
            Prepends a new expression using the supplied left term, operator, and right term using an AND clause.
            </summary>
            <param name="left">The left term of the expression; can either be a string term or a nested expression.</param>
            <param name="oper">The operator.</param>
            <param name="right">The right term of the expression; can either be an object for comparison or a nested expression.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.PrependAnd(LiteGraph.Sdk.Expr)">
            <summary>
            Prepends the expression with the supplied expression using an AND clause.
            </summary>
            <param name="prepend">The expression to prepend.</param> 
        </member>
        <member name="M:LiteGraph.Sdk.Expr.PrependOr(System.Object,LiteGraph.Sdk.OperatorEnum,System.Object)">
            <summary>
            Prepends a new expression using the supplied left term, operator, and right term using an OR clause.
            </summary>
            <param name="left">The left term of the expression; can either be a string term or a nested expression.</param>
            <param name="oper">The operator.</param>
            <param name="right">The right term of the expression; can either be an object for comparison or a nested expression.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.PrependOr(LiteGraph.Sdk.Expr)">
            <summary>
            Prepends the expression with the supplied expression using an OR clause.
            </summary>
            <param name="prepend">The expression to prepend.</param> 
        </member>
        <member name="M:LiteGraph.Sdk.Expr.Copy">
            <summary>
            Create a copy of an expression.
            </summary>
            <returns>New instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.PrependAndClause(LiteGraph.Sdk.Expr,LiteGraph.Sdk.Expr)">
            <summary>
            Prepends the expression in prepend to the expression original using an AND clause.
            </summary>
            <param name="prepend">The expression to prepend.</param>
            <param name="original">The original expression.</param>
            <returns>A new expression.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.PrependOrClause(LiteGraph.Sdk.Expr,LiteGraph.Sdk.Expr)">
            <summary>
            Prepends the expression in prepend to the expression original using an OR clause.
            </summary>
            <param name="prepend">The expression to prepend.</param>
            <param name="original">The original expression.</param>
            <returns>A new expression.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.ListToNestedAndExpression(System.Collections.Generic.List{LiteGraph.Sdk.Expr})">
            <summary>
            Convert a list of expression objects to a nested expression containing AND between each expression in the list. 
            </summary>
            <param name="exprList">List of expression objects.</param>
            <returns>A nested expression.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.ListToNestedOrExpression(System.Collections.Generic.List{LiteGraph.Sdk.Expr})">
            <summary>
            Convert a list of expression objects to a nested expression containing OR between each expression in the list. 
            </summary>
            <param name="exprList">List of expression objects.</param>
            <returns>A nested expression.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.IsArray(System.Object)">
            <summary>
            Determines if an object is of an array type (excluding String objects).
            </summary>
            <param name="o">Object.</param>
            <returns>True if the object is of an Array type.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Expr.IsList(System.Object)">
            <summary>
            Determines if an object is of a List type.
            </summary>
            <param name="o">Object.</param>
            <returns>True if the object is of a List type.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Graph.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.LiteGraphSdk">
            <summary>
            LiteGraph SDK. 
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.#ctor(System.String)">
            <summary>
            Instantiate.
            </summary>
            <param name="endpoint">Endpoint URL.</param>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.CreateGraph(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Create a graph.
            </summary>
            <param name="name">Name.</param>
            <param name="data">Data.</param>
            <param name="token">Cancellation token.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.ReadGraphs(System.Threading.CancellationToken)">
            <summary>
            Read graphs.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>Graphs.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.ReadGraph(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read graph.
            </summary>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.UpdateGraph(LiteGraph.Sdk.Graph,System.Threading.CancellationToken)">
            <summary>
            Update a graph.
            </summary>
            <param name="graph">Graph.</param>
            <param name="token">Cancellation token.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.DeleteGraph(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Delete a graph.
            </summary>
            <param name="guid">GUID.</param>
            <param name="force">Force recursive deletion of edges and nodes.</param>
            <param name="token">Cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.ExportGraphToGexf(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Export a graph to GEXF format.
            </summary>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>String containing GEXF XML data.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.CreateNode(LiteGraph.Sdk.Node,System.Threading.CancellationToken)">
            <summary>
            Create a node.
            </summary>
            <param name="node">Node.</param>
            <param name="token">Cancellation token.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.ReadNodes(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read nodes.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.ReadNode(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read a node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.UpdateNode(LiteGraph.Sdk.Node,System.Threading.CancellationToken)">
            <summary>
            Update a node.
            </summary>
            <param name="node">Node.</param>
            <param name="token">Cancellation token.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.DeleteNode(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete a node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.CreateEdge(LiteGraph.Sdk.Edge,System.Threading.CancellationToken)">
            <summary>
            Create an edge.
            </summary>
            <param name="edge">Edge.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.ReadEdges(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read edges.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.ReadEdge(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read an edge.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid"></param>
            <param name="token">Cancellation token.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.UpdateEdge(LiteGraph.Sdk.Edge,System.Threading.CancellationToken)">
            <summary>
            Update an edge.
            </summary>
            <param name="edge">Edge.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.DeleteEdge(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete an edge.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid"></param>
            <param name="token">Cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.GetEdgesFromNode(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get edges from a node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.GetEdgesToNode(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get edges to a node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.GetAllNodeEdges(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get all edges to or from a node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.GetChildrenFromNode(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get child nodes from a node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.GetParentsFromNode(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get parent nodes from a node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.GetNodeNeighbors(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get neighboring nodes from a node.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.GetRoutes(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get routes between two nodes.
            </summary>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Routes.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Node">
            <summary>
            Node in the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.GraphGUID">
            <summary>
            Globally-unique identifier for the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Node.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.OperatorEnum">
            <summary>
            Available conditions for search filters.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.Equals">
            <summary>
            The left and right terms are equal to one another.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.NotEquals">
            <summary>
            The left and right terms are not equal to one another.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.GreaterThan">
            <summary>
            The left term is greater than the right term.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.GreaterThanOrEqualTo">
            <summary>
            The left term is greater than or equal to the right term.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.LessThan">
            <summary>
            The left term is less than the right term.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.LessThanOrEqualTo">
            <summary>
            The left term is less than or equal to the right term.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.IsNull">
            <summary>
            The left term is null.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.IsNotNull">
            <summary>
            The left term is not null.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.Contains">
            <summary>
            The left term is contained within the right term (list).
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.ContainsNot">
            <summary>
            The left term is not contained within the right term (list).
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.StartsWith">
            <summary>
            The left term starts with the right term.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.StartsWithNot">
            <summary>
            The left term does not start with the right term.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.EndsWith">
            <summary>
            The left term ends with the right term.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.EndsWithNot">
            <summary>
            The left term does not end with the right term.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.And">
            <summary>
            The left and right both resolve to true.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.Or">
            <summary>
            Either the left, the right, or both resolve to true.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.In">
            <summary>
            Value is contained within a list
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.OperatorEnum.NotIn">
            <summary>
            Value is not contained within a list
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.RouteDetail">
            <summary>
            Total cost and ordered list of edges between two nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteDetail.TotalCost">
            <summary>
            Total cost of the route.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteDetail.Edges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.RouteDetail.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.RouteRequest">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteRequest.Graph">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteRequest.From">
            <summary>
            From node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteRequest.To">
            <summary>
            To node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteRequest.EdgeFilter">
            <summary>
            Edge filters.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteRequest.NodeFilter">
            <summary>
            Node filters.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.RouteRequest.#ctor">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.RouteResponse">
            <summary>
            Route response.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteResponse.Timestamp">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteResponse.Routes">
            <summary>
            Routes.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.RouteResponse.#ctor">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.SdkBase">
            <summary>
            View SDK base class.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SdkBase.Logger">
            <summary>
            Method to invoke to send log messages.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SdkBase.Header">
            <summary>
            Header to prepend to log messages.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SdkBase.Endpoint">
            <summary>
            Endpoint URL.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.#ctor(System.String)">
            <summary>
            Instantiate.
            </summary>
            <param name="endpoint">Endpoint.</param>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Log(LiteGraph.Sdk.SeverityEnum,System.String)">
            <summary>
            Emit a log message.
            </summary>
            <param name="sev">Severity.</param>
            <param name="msg">Message.</param>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.ValidateConnectivity(System.Threading.CancellationToken)">
            <summary>
            Validate connectivity.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>Boolean indicating success.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.PutCreate``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Create an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="url">URL.</param>
            <param name="obj">Object.</param>
            <param name="token"></param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Head(System.String,System.Threading.CancellationToken)">
            <summary>
            Check if an object exists.
            </summary>
            <param name="url">URL.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Get``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Read an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="url">URL.</param>
            <param name="token">Cancellation token.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Read an object.
            </summary>
            <param name="url">URL.</param>
            <param name="token">Cancellation token.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.GetMany``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Read objects.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="url">URL.</param>
            <param name="token">Cancellation token.</param>
            <returns>List.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.PutUpdate``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Update an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="url">URL.</param>
            <param name="obj">Object.</param>
            <param name="token">Cancellation token.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Delete(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete an object.
            </summary>
            <param name="url">URL.</param>
            <param name="token">Cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Post(System.String,System.Byte[],System.String,System.Threading.CancellationToken)">
            <summary>
            Submit a POST request.
            </summary>
            <param name="url">URL.</param>
            <param name="bytes">Bytes.</param>
            <param name="contentType">Content-type.</param>
            <param name="token">Cancellation token.</param>
            <returns>Bytes.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.SearchTypeEnum">
            <summary>
            Search type.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SearchTypeEnum.DepthFirstSearch">
            <summary>
            Depth first search.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer">
            <summary>
            JSON serializer.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Serializer.DateTimeFormat">
            <summary>
            DateTime format.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Serializer.IncludeNullProperties">
            <summary>
            True to include null properties when serializing, false to not include null properties when serializing.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.DeserializeJson``1(System.Byte[])">
            <summary>
            Deserialize JSON to an instance.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="json">JSON bytes.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.DeserializeJson``1(System.String)">
            <summary>
            Deserialize JSON to an instance.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="json">JSON string.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.SerializeJson(System.Object,System.Boolean)">
            <summary>
            Serialize object to JSON.
            </summary>
            <param name="obj">Object.</param>
            <param name="pretty">Pretty print.</param>
            <returns>JSON.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.CopyObject``1(System.Object)">
            <summary>
            Copy an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="o">Object.</param>
            <returns>Instance.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.ExceptionConverter`1">
            <summary>
            Exception converter.
            </summary>
            <typeparam name="TExceptionType">Exception type.</typeparam>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.ExceptionConverter`1.CanConvert(System.Type)">
            <summary>
            Can convert.
            </summary>
            <param name="typeToConvert">Type to convert.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.ExceptionConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>TExceptionType.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.ExceptionConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.NameValueCollectionConverter">
            <summary>
            Name value collection converter.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.NameValueCollectionConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>NameValueCollection.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.NameValueCollectionConverter.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Specialized.NameValueCollection,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.DateTimeConverter">
            <summary>
            DateTime converter.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.DateTimeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>NameValueCollection.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.DateTimeConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="F:LiteGraph.Sdk.Serializer.DateTimeConverter._AcceptedFormats">
            <summary>
            Reserved for future use.
            Not used because Read does a TryParse which will evaluate several formats.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.IntPtrConverter">
            <summary>
            IntPtr converter.  IntPtr cannot be deserialized.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.IntPtrConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>NameValueCollection.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.IntPtrConverter.Write(System.Text.Json.Utf8JsonWriter,System.IntPtr,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.IPAddressConverter">
            <summary>
            IP address converter.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.IPAddressConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>NameValueCollection.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.IPAddressConverter.Write(System.Text.Json.Utf8JsonWriter,System.Net.IPAddress,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.ExpressionConverter">
            <summary>
            Expression converter.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.ExpressionConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>Expr.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.ExpressionConverter.Write(System.Text.Json.Utf8JsonWriter,LiteGraph.Sdk.Expr,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="T:LiteGraph.Sdk.SeverityEnum">
            <summary>
            Message severity.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Debug">
            <summary>
            Debug messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Info">
            <summary>
            Informational messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Warn">
            <summary>
            Warning messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Error">
            <summary>
            Error messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Alert">
            <summary>
            Alert messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Critical">
            <summary>
            Critical messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Emergency">
            <summary>
            Emergency messages.
            </summary>
        </member>
    </members>
</doc>
